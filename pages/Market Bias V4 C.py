############ Bloco A - Imports e Configura√ß√µes Base ################
from __future__ import annotations
import streamlit as st
import pandas as pd
import numpy as np
import os
import joblib
import re
from sklearn.ensemble import RandomForestClassifier
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from datetime import datetime
import math
import plotly.graph_objects as go
import sys

#######################################
# Hotfix para limpar cache problematico
if hasattr(st, 'cache_data'):
    st.cache_data.clear()
if hasattr(st, 'cache_resource'):
    st.cache_resource.clear()
    

# Limpar m√≥dulos carregados se necess√°rio
module_suffix = '_page'
for module_name in list(sys.modules.keys()):
    if module_name.endswith(module_suffix):
        del sys.modules[module_name]

#######################################

# # Configura√ß√£o da p√°gina
# st.set_page_config(page_title="Sistema 3D Clusters - Bet Indicator", layout="wide")
# st.title("üéØ Sistema 3D com Clusters - ML Avan√ßado")

# Configura√ß√µes base
PAGE_PREFIX = "Clusters3D_ML"
GAMES_FOLDER = "GamesDay"
LIVESCORE_FOLDER = "LiveScore"
EXCLUDED_LEAGUE_KEYWORDS = ["cup", "copas", "uefa", "afc", "sudamericana", "copa", "trophy", "coppa"]

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MODELS_FOLDER = os.path.join(BASE_DIR, "Models")
os.makedirs(MODELS_FOLDER, exist_ok=True)


############ Bloco B - Fun√ß√µes de Helpers Base ################
# ---------------- Helpers B√°sicos ----------------
def preprocess_df(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    if "Goals_H_FT_x" in df.columns:
        df = df.rename(columns={"Goals_H_FT_x": "Goals_H_FT", "Goals_A_FT_x": "Goals_A_FT"})
    elif "Goals_H_FT_y" in df.columns:
        df = df.rename(columns={"Goals_H_FT_y": "Goals_H_FT", "Goals_A_FT_y": "Goals_A_FT"})
    return df

def load_all_games(folder: str) -> pd.DataFrame:
    files = [f for f in os.listdir(folder) if f.endswith(".csv")]
    if not files:
        return pd.DataFrame()
    dfs = [preprocess_df(pd.read_csv(os.path.join(folder, f))) for f in files]
    return pd.concat(dfs, ignore_index=True)

def filter_leagues(df: pd.DataFrame) -> pd.DataFrame:
    if df.empty or "League" not in df.columns:
        return df
    pattern = "|".join(EXCLUDED_LEAGUE_KEYWORDS)
    return df[~df["League"].str.lower().str.contains(pattern, na=False)].copy()

def setup_livescore_columns(df):
    """Garante que as colunas do Live Score existam no DataFrame"""
    if 'Goals_H_Today' not in df.columns:
        df['Goals_H_Today'] = np.nan
    if 'Goals_A_Today' not in df.columns:
        df['Goals_A_Today'] = np.nan
    if 'Home_Red' not in df.columns:
        df['Home_Red'] = np.nan
    if 'Away_Red' not in df.columns:
        df['Away_Red'] = np.nan
    return df


############ Bloco C - Fun√ß√µes Asian Line ################
# ---------------- Fun√ß√µes Asian Line ----------------
def convert_asian_line_to_decimal(value):
    """
    Converte handicaps asi√°ticos (Away) no formato string para decimal invertido (Home).

    Regras oficiais e consistentes com Pinnacle/Bet365:
      '0/0.5'   -> +0.25  (para away) ‚Üí invertido: -0.25 (para home)
      '-0.5/0'  -> -0.25  (para away) ‚Üí invertido: +0.25 (para home)
      '-1/1.5'  -> -0.25  ‚Üí +0.25
      '1/1.5'   -> +1.25  ‚Üí -1.25
      '1.5'     -> +1.50  ‚Üí -1.50
      '0'       ->  0.00  ‚Üí  0.00

    Retorna: float
    """
    if pd.isna(value):
        return np.nan

    value = str(value).strip()

    # Caso simples ‚Äî n√∫mero √∫nico
    if "/" not in value:
        try:
            num = float(value)
            return -num  # ‚úÖ INVERTE SINAL (Away ‚Üí Home)
        except ValueError:
            return np.nan

    # Caso duplo ‚Äî m√©dia dos dois lados
    try:
        parts = [float(p) for p in value.split("/")]
        avg = np.mean(parts)
        # Mant√©m o sinal do primeiro n√∫mero
        if str(value).startswith("-"):
            result = -abs(avg)
        else:
            result = abs(avg)
        # ‚úÖ INVERTE O SINAL NO FINAL (Away ‚Üí Home)
        return -result
    except ValueError:
        return np.nan

def calc_handicap_result(margin, asian_line_str, invert=False):
    """Retorna m√©dia de pontos por linha (1 win, 0.5 push, 0 loss)"""
    if pd.isna(asian_line_str):
        return np.nan
    if invert:
        margin = -margin
    try:
        parts = [float(x) for x in str(asian_line_str).split('/')]
    except:
        return np.nan
    results = []
    for line in parts:
        if margin > line:
            results.append(1.0)
        elif margin == line:
            results.append(0.5)
        else:
            results.append(0.0)
    return np.mean(results)

# def validar_conversao_handicap():
#     """Testa a convers√£o de handicaps com exemplos conhecidos"""
#     exemplos = [
#         '0', '0.5', '-0.5', '0/0.5', '-0.5/0', '1/1.5', '-1/1.5', '1.5', '-1.5'
#     ]
    
#     st.markdown("### üß™ Valida√ß√£o da Convers√£o de Handicap")
#     st.write("**Regra:** Away ‚Üí Home (inverte sinal)")
    
#     resultados = []
#     for exemplo in exemplos:
#         convertido = convert_asian_line_to_decimal(exemplo)
#         resultados.append({
#             'Original (Away)': exemplo,
#             'Convertido (Home)': convertido,
#             'Descri√ß√£o': f"Away {exemplo} ‚Üí Home {convertido:.2f}"
#         })
    
#     df_validacao = pd.DataFrame(resultados)
#     st.dataframe(df_validacao, use_container_width=True)
    
#     # Verificar consist√™ncia
#     st.markdown("#### ‚úÖ Verifica√ß√£o de Consist√™ncia")
#     st.write("**0/0.5** ‚Üí Away +0.25 ‚Üí Home -0.25:", convert_asian_line_to_decimal('0/0.5') == -0.25)
#     st.write("**-0.5/0** ‚Üí Away -0.25 ‚Üí Home +0.25:", convert_asian_line_to_decimal('-0.5/0') == 0.25)
#     st.write("**1.5** ‚Üí Away +1.50 ‚Üí Home -1.50:", convert_asian_line_to_decimal('1.5') == -1.50)

# def verificar_sistema_handicap(history, games_today):
#     """Verifica a integridade do sistema de handicap"""
#     st.markdown("### üîç Verifica√ß√£o do Sistema de Handicap")
    
#     # 1. Verificar se h√° valores convertidos
#     st.write("**1. Valores convertidos no hist√≥rico:**")
#     st.write(f"- Total: {len(history)}")
#     st.write(f"- Com Asian Line: {history['Asian_Line_Decimal'].notna().sum()}")
#     st.write(f"- Exemplos: {history['Asian_Line_Decimal'].head(5).tolist()}")
    
#     # 2. Verificar distribui√ß√£o
#     st.write("**2. Distribui√ß√£o dos handicaps:**")
#     if 'Asian_Line_Decimal' in history.columns:
#         st.write(history['Asian_Line_Decimal'].describe())
    
#     # 3. Verificar c√°lculo de resultados
#     st.write("**3. Exemplo de c√°lculo de handicap:**")
#     if len(history) > 0:
#         exemplo = history.iloc[0]
#         margin = exemplo.get('Goals_H_FT', 0) - exemplo.get('Goals_A_FT', 0)
#         handicap_line = exemplo.get('Asian_Line_Decimal', 0)
#         resultado = calc_handicap_result(margin, handicap_line)
        
#         st.write(f"Jogo: {exemplo.get('Home', '')} vs {exemplo.get('Away', '')}")
#         st.write(f"Margin: {margin}, Handicap: {handicap_line:.2f}")
#         st.write(f"Resultado: {resultado:.2f}")



############ Bloco D - Sistema de Clusteriza√ß√£o 3D ################
# ==============================================================
# üß© BLOCO ‚Äì CLUSTERIZA√á√ÉO 3D (KMEANS) - ATUALIZADO
# ==============================================================

def aplicar_clusterizacao_3d(df, n_clusters=5, random_state=42):
    """
    Cria clusters espaciais com base em Aggression, Momentum Liga e Momentum Time.
    SISTEMA FLEX√çVEL: Legendas din√¢micas baseadas nos centroides reais de cada execu√ß√£o
    """
    df = df.copy()

    # Garante as colunas necess√°rias
    required_cols = ['Aggression_Home', 'Aggression_Away', 'M_H', 'M_A', 'MT_H', 'MT_A']
    missing = [c for c in required_cols if c not in df.columns]
    if missing:
        st.warning(f"‚ö†Ô∏è Colunas ausentes para clusteriza√ß√£o 3D: {missing}")
        df['Cluster3D_Label'] = -1
        df['Cluster3D_Desc'] = 'üåÄ Dados Insuficientes'
        return df

    # Diferen√ßas espaciais (vetor 3D) - Rela√ß√£o Home vs Away
    df['dx'] = df['Aggression_Home'] - df['Aggression_Away']
    df['dy'] = df['M_H'] - df['M_A']
    df['dz'] = df['MT_H'] - df['MT_A']

    # Preencher NaN com 0 para evitar erro no KMeans
    X_cluster = df[['dx', 'dy', 'dz']].fillna(0).to_numpy()

    # Verificar se h√° dados suficientes para clusteriza√ß√£o
    if len(X_cluster) < n_clusters:
        st.warning(f"‚ö†Ô∏è Dados insuficientes para {n_clusters} clusters. Apenas {len(X_cluster)} amostras dispon√≠veis.")
        n_clusters = max(2, len(X_cluster) // 2)  # Ajustar n√∫mero de clusters

    # KMeans 3D
    try:
        kmeans = KMeans(
            n_clusters=n_clusters,
            random_state=random_state,
            init='k-means++',
            n_init=10
        )
        df['Cluster3D_Label'] = kmeans.fit_predict(X_cluster)

        # # üéØ SISTEMA FLEX√çVEL: CLASSIFICAR CLUSTERS DINAMICAMENTE
        # st.markdown("## üß† Sistema Flex√≠vel de Legendas Din√¢micas")
        
        # 1. CALCULAR CENTROIDES REAIS
        centroids = kmeans.cluster_centers_
        
        # 2. CLASSIFICAR CADA CLUSTER BASEADO NOS CENTROIDES
        classificacoes_clusters = classificar_clusters_dinamicamente(centroids)
        
        # 3. APLICAR LEGENDAS DIN√ÇMICAS
        df['Cluster3D_Desc'] = df['Cluster3D_Label'].map(classificacoes_clusters).fillna('üåÄ Caso At√≠pico')
        
        # 4. EXIBIR DIAGN√ìSTICO INTELIGENTE
        exibir_diagnostico_clusters(df, centroids, classificacoes_clusters)
        
    except Exception as e:
        st.error(f"‚ùå Erro na clusteriza√ß√£o: {e}")
        df['Cluster3D_Label'] = -1
        df['Cluster3D_Desc'] = 'üåÄ Erro na Clusteriza√ß√£o'
    
    return df

def classificar_clusters_dinamicamente(centroids):
    """
    Classifica clusters dinamicamente baseado nos centroides reais
    Retorna dicion√°rio {cluster_id: legenda}
    """
    classificacoes = {}
    
    # THRESHOLDS AJUST√ÅVEIS (baseado na sua distribui√ß√£o de dados)
    THRESHOLD_ALTO = 0.3
    THRESHOLD_BAIXO = -0.3
    THRESHOLD_EQUILIBRADO = 0.15
    
    for cluster_id, centroid in enumerate(centroids):
        dx, dy, dz = centroid
        
        # üéØ L√ìGICA INTELIGENTE DE CLASSIFICA√á√ÉO
        if dx > THRESHOLD_ALTO and dy > THRESHOLD_ALTO and dz > THRESHOLD_ALTO:
            classificacao = 'üè† Home Domina Totalmente'
            
        elif dx > THRESHOLD_ALTO and dy > THRESHOLD_ALTO:
            classificacao = 'üè† Home Domina (Liga Forte)'
            
        elif dx > THRESHOLD_ALTO and dz > THRESHOLD_ALTO:
            classificacao = 'üè† Home Domina (Time Forte)'
            
        elif dx > THRESHOLD_ALTO:
            classificacao = 'üìà Home Agressivo'
            
        elif dx < THRESHOLD_BAIXO and dy < THRESHOLD_BAIXO and dz < THRESHOLD_BAIXO:
            classificacao = 'üöó Away Domina Totalmente'
            
        elif dx < THRESHOLD_BAIXO and dy < THRESHOLD_BAIXO:
            classificacao = 'üöó Away Domina (Liga Forte)'
            
        elif dx < THRESHOLD_BAIXO and dz < THRESHOLD_BAIXO:
            classificacao = 'üöó Away Domina (Time Forte)'
            
        elif dx < THRESHOLD_BAIXO:
            classificacao = 'üìâ Away Agressivo'
            
        elif abs(dx) <= THRESHOLD_EQUILIBRADO and abs(dy) <= 1.0 and abs(dz) <= 1.0:
            classificacao = '‚öñÔ∏è Confronto Equilibrado'
            
        elif abs(dy) > 2.0 or abs(dz) > 2.0:
            # Momentum muito extremo
            if dx > 0:
                classificacao = 'üé≠ Home Imprevis√≠vel'
            else:
                classificacao = 'üå™Ô∏è Away Imprevis√≠vel'
                
        elif (dx > 0 and dy < 0) or (dx < 0 and dy > 0):
            # Sinais contradit√≥rios entre aggression e momentum
            classificacao = 'üîÑ Sinais Contradit√≥rios'
            
        else:
            # Caso padr√£o - classificar baseado no aggression
            if dx > 0.1:
                classificacao = 'üìä Home Leve Vantagem'
            elif dx < -0.1:
                classificacao = 'üìä Away Leve Vantagem'
            else:
                classificacao = '‚öñÔ∏è Equil√≠brio Neutro'
        
        classificacoes[cluster_id] = classificacao
    
    return classificacoes

def exibir_diagnostico_clusters(df, centroids, classificacoes):
    """
    Exibe diagn√≥stico inteligente dos clusters
    """
    # st.markdown("### üìä Diagn√≥stico Inteligente dos Clusters")
    
    # TABELA DE CENTROIDES COM LEGENDAS DIN√ÇMICAS
    # centroids_df = pd.DataFrame(centroids, columns=['dx', 'dy', 'dz'])
    # centroids_df['Cluster'] = range(len(centroids))
    # centroids_df['Legenda Din√¢mica'] = centroids_df['Cluster'].map(classificacoes)
    # centroids_df['Jogos'] = centroids_df['Cluster'].apply(
    #     lambda x: len(df[df['Cluster3D_Label'] == x])
    # )
    
    # st.markdown("#### üéØ Centroides com Legendas Din√¢micas")
    # st.dataframe(centroids_df.style.format({
    #     'dx': '{:.3f}', 
    #     'dy': '{:.3f}', 
    #     'dz': '{:.3f}'
    # }), use_container_width=True)
    
    # # AN√ÅLISE DETALHADA POR CLUSTER
    # st.markdown("#### üìà An√°lise Detalhada por Cluster")
    
    for cluster_id in sorted(df['Cluster3D_Label'].unique()):
        cluster_data = df[df['Cluster3D_Label'] == cluster_id]
        legenda = classificacoes[cluster_id]
        
        if len(cluster_data) > 0:
            st.write(f"**{legenda}** (Cluster {cluster_id})")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Jogos", len(cluster_data))
                st.write(f"**dx:** {cluster_data['dx'].mean():.3f}")
                
            with col2:
                agg_h = cluster_data['Aggression_Home'].mean()
                agg_a = cluster_data['Aggression_Away'].mean()
                st.metric("Aggression", f"H:{agg_h:.3f} A:{agg_a:.3f}")
                st.write(f"**dy:** {cluster_data['dy'].mean():.3f}")
                
            with col3:
                m_h = cluster_data['M_H'].mean()
                m_a = cluster_data['M_A'].mean()
                st.metric("Momentum Liga", f"H:{m_h:.3f} A:{m_a:.3f}")
                st.write(f"**dz:** {cluster_data['dz'].mean():.3f}")
            
            # EXEMPLO DO CLUSTER
            exemplo = cluster_data.iloc[0]
            st.write(f"**Exemplo:** {exemplo['Home']} vs {exemplo['Away']}")
            st.write(f"**dx real:** {exemplo['dx']:.3f} | **Legenda:** {legenda}")
            
            # VALIDA√á√ÉO DA LEGENDA
            # dx_exemplo = exemplo['dx']
            # if "Home" in legenda and dx_exemplo > 0:
            #     st.success("‚úÖ Legenda coerente com dados")
            # elif "Away" in legenda and dx_exemplo < 0:
            #     st.success("‚úÖ Legenda coerente com dados") 
            # elif "Equil√≠brio" in legenda and abs(dx_exemplo) < 0.2:
            #     st.success("‚úÖ Legenda coerente com dados")
            # else:
            #     st.info("üîç Legenda baseada em padr√£o complexo")
            
            # st.write("---")

    # # RESUMO ESTAT√çSTICO
    # st.markdown("#### üìã Resumo Estat√≠stico")
    # resumo = df.groupby('Cluster3D_Desc').agg({
    #     'Cluster3D_Label': 'count',
    #     'dx': 'mean',
    #     'dy': 'mean', 
    #     'dz': 'mean'
    # }).rename(columns={'Cluster3D_Label': 'Jogos'})
    
    # st.dataframe(resumo.style.format({
    #     'dx': '{:.3f}',
    #     'dy': '{:.3f}', 
    #     'dz': '{:.3f}'
    # }), use_container_width=True)
#################################################################

############ Bloco E - C√°lculo de Momentum e Regress√£o ################
# ---------------- C√ÅLCULO DE MOMENTUM DO TIME ----------------
def calcular_momentum_time(df, window=6):
    """
    Calcula o Momentum do Time (MT_H / MT_A) com base no HandScore,
    usando m√©dia m√≥vel e normaliza√ß√£o z-score por time.
    """
    df = df.copy()

    # Garante exist√™ncia das colunas
    if 'MT_H' not in df.columns:
        df['MT_H'] = np.nan
    if 'MT_A' not in df.columns:
        df['MT_A'] = np.nan

    # Verificar se HandScore existe
    if 'HandScore_Home' not in df.columns or 'HandScore_Away' not in df.columns:
        st.warning("‚ö†Ô∏è Colunas HandScore n√£o encontradas - preenchendo MT com 0")
        df['MT_H'] = 0
        df['MT_A'] = 0
        return df

    # Lista de todos os times (Home + Away)
    all_teams = pd.unique(df[['Home', 'Away']].values.ravel())

    for team in all_teams:
        # ---------------- HOME ----------------
        mask_home = df['Home'] == team
        if mask_home.sum() > 2:  # precisa de hist√≥rico m√≠nimo
            try:
                series = df.loc[mask_home, 'HandScore_Home'].astype(float).rolling(window, min_periods=2).mean()
                if series.std(ddof=0) != 0:
                    zscore = (series - series.mean()) / series.std(ddof=0)
                else:
                    zscore = series * 0  # Todos zeros se n√£o h√° varia√ß√£o
                df.loc[mask_home, 'MT_H'] = zscore
            except Exception as e:
                df.loc[mask_home, 'MT_H'] = 0

        # ---------------- AWAY ----------------
        mask_away = df['Away'] == team
        if mask_away.sum() > 2:
            try:
                series = df.loc[mask_away, 'HandScore_Away'].astype(float).rolling(window, min_periods=2).mean()
                if series.std(ddof=0) != 0:
                    zscore = (series - series.mean()) / series.std(ddof=0)
                else:
                    zscore = series * 0
                df.loc[mask_away, 'MT_A'] = zscore
            except Exception as e:
                df.loc[mask_away, 'MT_A'] = 0

    # Preenche eventuais NaN com 0 (neutro)
    df['MT_H'] = df['MT_H'].fillna(0)
    df['MT_A'] = df['MT_A'].fillna(0)

    return df


  ############ Bloco E - C√°lculo de Momentum e Regress√£o ################
# ---------------- C√ÅLCULO DE REGRESS√ÉO √Ä M√âDIA ----------------
def calcular_regressao_media(df):
    """
    Calcula tend√™ncia de regress√£o √† m√©dia baseada em:
    - M_H, M_A: Z-score do momentum na liga  
    - MT_H, MT_A: Z-score do momentum do time
    """
    df = df.copy()
    
    # 1. SCORE DE EXTREMIDADE (qu√£o longe da m√©dia)
    df['Extremidade_Home'] = np.abs(df['M_H']) + np.abs(df['MT_H'])
    df['Extremidade_Away'] = np.abs(df['M_A']) + np.abs(df['MT_A'])
    
    # 2. FOR√áA DE REGRESS√ÉO (quanto tende a voltar √† m√©dia)
    df['Regressao_Force_Home'] = -np.sign(df['M_H']) * (df['Extremidade_Home'] ** 0.7)
    df['Regressao_Force_Away'] = -np.sign(df['M_A']) * (df['Extremidade_Away'] ** 0.7)
    
    # 3. PROBABILIDADE DE REGRESS√ÉO (0-1 scale)
    df['Prob_Regressao_Home'] = 1 / (1 + np.exp(-0.8 * df['Regressao_Force_Home']))
    df['Prob_Regressao_Away'] = 1 / (1 + np.exp(-0.8 * df['Regressao_Force_Away']))
    
    # 4. MEDIA SCORE FINAL (combina regress√£o com aggression atual)
    df['Media_Score_Home'] = (0.6 * df['Prob_Regressao_Home'] + 
                             0.4 * (1 - df['Aggression_Home']))
    
    df['Media_Score_Away'] = (0.6 * df['Prob_Regressao_Away'] + 
                             0.4 * (1 - df['Aggression_Away']))
    
    # 5. CLASSIFICA√á√ÉO DE REGRESS√ÉO
    conditions_home = [
        df['Regressao_Force_Home'] > 1.0,
        df['Regressao_Force_Home'] > 0.3,
        df['Regressao_Force_Home'] > -0.3,
        df['Regressao_Force_Home'] > -1.0,
        df['Regressao_Force_Home'] <= -1.0
    ]
    choices_home = ['üìà FORTE MELHORA', 'üìà MELHORA', '‚öñÔ∏è EST√ÅVEL', 'üìâ QUEDA', 'üìâ FORTE QUEDA']
    df['Tendencia_Home'] = np.select(conditions_home, choices_home, default='‚öñÔ∏è EST√ÅVEL')
    
    conditions_away = [
        df['Regressao_Force_Away'] > 1.0,
        df['Regressao_Force_Away'] > 0.3,
        df['Regressao_Force_Away'] > -0.3,
        df['Regressao_Force_Away'] > -1.0,
        df['Regressao_Force_Away'] <= -1.0
    ]
    choices_away = ['üìà FORTE MELHORA', 'üìà MELHORA', '‚öñÔ∏è EST√ÅVEL', 'üìâ QUEDA', 'üìâ FORTE QUEDA']
    df['Tendencia_Away'] = np.select(conditions_away, choices_away, default='‚öñÔ∏è EST√ÅVEL')
    
    return df



############ Bloco F - Visualiza√ß√£o 3D com Clusters ################

# ---------------- VISUALIZA√á√ÉO 3D COM CLUSTERS ----------------
def create_3d_plot_with_clusters(df_plot, n_to_show, selected_league):
    """Gr√°fico 3D colorido por clusters - VERS√ÉO CORRIGIDA COM LINHAS"""
    
    # Verificar se temos dados v√°lidos
    if df_plot.empty:
        st.warning("üì≠ DataFrame vazio - n√£o √© poss√≠vel criar gr√°fico")
        return go.Figure()
    
    # Criar figura
    fig_3d = go.Figure()

    # Cores por cluster
    cluster_cores = {
        'üè† Home Domina Totalmente': 'blue',
        'üè† Home Domina (Liga Forte)': 'darkblue',
        'üè† Home Domina (Time Forte)': 'lightblue',
        'üìà Home Agressivo': 'cyan',
        'üöó Away Domina Totalmente': 'red',
        'üöó Away Domina (Liga Forte)': 'darkred', 
        'üöó Away Domina (Time Forte)': 'lightcoral',
        'üìâ Away Agressivo': 'orange',
        '‚öñÔ∏è Confronto Equilibrado': 'green',
        'üé≠ Home Imprevis√≠vel': 'purple',
        'üå™Ô∏è Away Imprevis√≠vel': 'magenta',
        'üîÑ Sinais Contradit√≥rios': 'yellow',
        'üìä Home Leve Vantagem': 'lightgreen',
        'üìä Away Leve Vantagem': 'lightsalmon',
        '‚öñÔ∏è Equil√≠brio Neutro': 'gray',
        'üåÄ Caso At√≠pico': 'lightgray',
        'üåÄ Dados Insuficientes': 'white',
        'üåÄ Erro na Clusteriza√ß√£o': 'black'
    }

    # Obter clusters √∫nicos presentes nos dados
    clusters_presentes = df_plot['Cluster3D_Desc'].unique()
    
    st.write(f"üéØ Clusters presentes: {list(clusters_presentes)}")

    # PRIMEIRO: Plotar todas as LINHAS de conex√£o
    for cluster_name in clusters_presentes:
        cluster_data = df_plot[df_plot['Cluster3D_Desc'] == cluster_name]
        
        if cluster_data.empty:
            continue
            
        color = cluster_cores.get(cluster_name, 'gray')
        
        # LINHAS DE CONEX√ÉO (Home ‚Üí Away) - AGORA MAIS ROBUSTO
        # LINHAS DE CONEX√ÉO (Home ‚Üí Away) - AGORA MAIS ROBUSTO
        for idx, row in cluster_data.iterrows():
            try:
                # Extrair valores com fallbacks seguros
                xh = row.get('Aggression_Home', 0) or 0
                xa = row.get('Aggression_Away', 0) or 0
                yh = row.get('M_H', 0) or 0
                ya = row.get('M_A', 0) or 0  
                zh = row.get('MT_H', 0) or 0
                za = row.get('MT_A', 0) or 0
                
                # Converter para float para garantir
                xh = float(xh) if not pd.isna(xh) else 0.0
                xa = float(xa) if not pd.isna(xa) else 0.0
                yh = float(yh) if not pd.isna(yh) else 0.0
                ya = float(ya) if not pd.isna(ya) else 0.0
                zh = float(zh) if not pd.isna(zh) else 0.0
                za = float(za) if not pd.isna(za) else 0.0
                
                # S√≥ plotar linha se os pontos forem diferentes (evitar linhas de tamanho zero)
                points_different = (xh != xa) or (yh != ya) or (zh != za)
                
                if points_different:
                    fig_3d.add_trace(go.Scatter3d(
                        x=[xh, xa],
                        y=[yh, ya], 
                        z=[zh, za],
                        mode='lines',
                        line=dict(
                            color=color, 
                            width=4  # Linha mais grossa
                            # REMOVIDO: opacity n√£o √© suportado em linhas 3D
                        ),
                        name=f'Linha {cluster_name}',
                        showlegend=False,  # N√£o mostrar na legenda para n√£o poluir
                        hoverinfo='text',
                        text=f"{row.get('Home', 'Home')} vs {row.get('Away', 'Away')}<br>{cluster_name}",
                        hovertemplate='<b>%{text}</b><extra></extra>'
                    ))
                    
            except Exception as e:
                # Log do erro mas continuar com outros jogos
                st.write(f"‚ö†Ô∏è Erro na linha do jogo {idx}: {e}")
                continue

    # SEGUNDO: Plotar os PONTOS (Home e Away)
    for cluster_name in clusters_presentes:
        cluster_data = df_plot[df_plot['Cluster3D_Desc'] == cluster_name]
        
        if cluster_data.empty:
            continue
            
        color = cluster_cores.get(cluster_name, 'gray')
        
        # Preparar dados para HOME
        home_valid = cluster_data[
            cluster_data[['Aggression_Home', 'M_H', 'MT_H']].notna().all(axis=1)
        ]
        
        # Preparar dados para AWAY  
        away_valid = cluster_data[
            cluster_data[['Aggression_Away', 'M_A', 'MT_A']].notna().all(axis=1)
        ]

        # ‚ûï PONTOS HOME (apenas dados v√°lidos)
        if not home_valid.empty:
            fig_3d.add_trace(go.Scatter3d(
                x=home_valid['Aggression_Home'],
                y=home_valid['M_H'],
                z=home_valid['MT_H'],
                mode='markers',
                name=f'{cluster_name} - Home',
                marker=dict(
                    color=color,
                    size=10,  # Aumentado para melhor visibilidade
                    symbol='circle',
                    opacity=0.9,
                    line=dict(color='white', width=2)
                ),
                text=home_valid.apply(
                    lambda r: f"<b>{r.get('Home', 'Home')}</b><br>"
                             f"Cluster: {cluster_name}<br>"
                             f"vs {r.get('Away', 'Away')}<br>"
                             f"Agg: {r.get('Aggression_Home', 0):.2f}<br>"
                             f"M_Liga: {r.get('M_H', 0):.2f}<br>"
                             f"M_Time: {r.get('MT_H', 0):.2f}", 
                    axis=1
                ),
                hovertemplate='%{text}<extra></extra>'
            ))

        # ‚ûï PONTOS AWAY (apenas dados v√°lidos)
        if not away_valid.empty:
            fig_3d.add_trace(go.Scatter3d(
                x=away_valid['Aggression_Away'],
                y=away_valid['M_A'],
                z=away_valid['MT_A'],
                mode='markers',
                name=f'{cluster_name} - Away',
                marker=dict(
                    color=color,
                    size=10,  # Aumentado para melhor visibilidade
                    symbol='diamond',
                    opacity=0.9,
                    line=dict(color='white', width=2)
                ),
                text=away_valid.apply(
                    lambda r: f"<b>{r.get('Away', 'Away')}</b><br>"
                             f"Cluster: {cluster_name}<br>" 
                             f"vs {r.get('Home', 'Home')}<br>"
                             f"Agg: {r.get('Aggression_Away', 0):.2f}<br>"
                             f"M_Liga: {r.get('M_A', 0):.2f}<br>"
                             f"M_Time: {r.get('MT_A', 0):.2f}",
                    axis=1
                ),
                hovertemplate='%{text}<extra></extra>'
            ))

    # Verificar se h√° traces no gr√°fico
    if len(fig_3d.data) == 0:
        st.warning("‚ö†Ô∏è Nenhum dado v√°lido para plotar no gr√°fico 3D")
        # Adicionar um trace vazio para evitar erro
        fig_3d.add_trace(go.Scatter3d(
            x=[0], y=[0], z=[0],
            mode='markers',
            marker=dict(size=1, opacity=0),
            showlegend=False
        ))

    # Contar tipos de elementos
    linhas = len([t for t in fig_3d.data if t.mode == 'lines'])
    pontos = len([t for t in fig_3d.data if t.mode == 'markers'])
    
    st.success(f"‚úÖ Gr√°fico 3D criado com {linhas} linhas e {pontos} grupos de pontos")

    # ---------------------- LAYOUT FIXO ----------------------
    # Calcular ranges din√¢micos baseados nos dados
    all_x = pd.concat([df_plot['Aggression_Home'], df_plot['Aggression_Away']]).dropna()
    all_y = pd.concat([df_plot['M_H'], df_plot['M_A']]).dropna()  
    all_z = pd.concat([df_plot['MT_H'], df_plot['MT_A']]).dropna()
    
    x_range = [all_x.min() - 0.1, all_x.max() + 0.1] if len(all_x) > 0 else [-1, 1]
    y_range = [all_y.min() - 0.5, all_y.max() + 0.5] if len(all_y) > 0 else [-3, 3]
    z_range = [all_z.min() - 0.5, all_z.max() + 0.5] if len(all_z) > 0 else [-3, 3]

    titulo_3d = f"Top {n_to_show} Confrontos - Visualiza√ß√£o 3D por Clusters"
    if selected_league != "‚öΩ Todas as ligas":
        titulo_3d += f" | {selected_league}"

    fig_3d.update_layout(
        title=dict(
            text=titulo_3d,
            x=0.5,
            font=dict(size=16, color='white')
        ),
        scene=dict(
            xaxis=dict(
                title='Aggression (-1 zebra ‚Üî +1 favorito)',
                range=x_range,
                backgroundcolor="rgba(20,20,20,0.1)",
                gridcolor="gray",
                showbackground=True,
                gridwidth=2,
                zerolinecolor="red",
                zerolinewidth=4
            ),
            yaxis=dict(
                title='Momentum (Liga)',
                range=y_range,
                backgroundcolor="rgba(20,20,20,0.1)", 
                gridcolor="gray",
                showbackground=True,
                gridwidth=2,
                zerolinecolor="green",
                zerolinewidth=4
            ),
            zaxis=dict(
                title='Momentum (Time)',
                range=z_range,
                backgroundcolor="rgba(20,20,20,0.1)",
                gridcolor="gray", 
                showbackground=True,
                gridwidth=2,
                zerolinecolor="blue",
                zerolinewidth=4
            ),
            aspectmode="cube",
            camera=dict(
                eye=dict(x=1.5, y=1.5, z=1.2),
                up=dict(x=0, y=0, z=1),
                center=dict(x=0, y=0, z=0)
            )
        ),
        template="plotly_dark",
        height=800,
        margin=dict(l=0, r=0, b=0, t=50),
        legend=dict(
            x=0.02,
            y=0.98,
            bgcolor="rgba(0,0,0,0.5)",
            font=dict(size=10),
            itemsizing='constant'
        )
    )
    
    return fig_3d



############ Bloco G - Carregamento de Dados e Cache ################
# ---------------- CARREGAMENTO DE DADOS E CACHE ----------------
@st.cache_data(ttl=3600)
def load_cached_data(selected_file):
    """Cache apenas dos dados pesados"""
    games_today = pd.read_csv(os.path.join(GAMES_FOLDER, selected_file))
    games_today = filter_leagues(games_today)
    
    history = filter_leagues(load_all_games(GAMES_FOLDER))
    history = history.dropna(subset=["Goals_H_FT", "Goals_A_FT", "Asian_Line"]).copy()
    
    return games_today, history

def load_and_merge_livescore(games_today, selected_date_str):
    """Carrega e faz merge dos dados do Live Score"""
    livescore_file = os.path.join(LIVESCORE_FOLDER, f"Resultados_RAW_{selected_date_str}.csv")

    # Setup das colunas
    games_today = setup_livescore_columns(games_today)

    if os.path.exists(livescore_file):
        st.info(f"üì° LiveScore file found: {livescore_file}")
        results_df = pd.read_csv(livescore_file)

        # Filtrar jogos cancelados/adiados
        results_df = results_df[~results_df['status'].isin(['Cancel', 'Postp.'])]

        required_cols = [
            'Id', 'status', 'home_goal', 'away_goal',
            'home_ht_goal', 'away_ht_goal',
            'home_corners', 'away_corners', 
            'home_yellow', 'away_yellow',
            'home_red', 'away_red'
        ]

        missing_cols = [col for col in required_cols if col not in results_df.columns]

        if missing_cols:
            st.error(f"‚ùå LiveScore file missing columns: {missing_cols}")
            return games_today
        else:
            # Fazer merge com os jogos do dia
            games_today = games_today.merge(
                results_df,
                left_on='Id',
                right_on='Id',
                how='left',
                suffixes=('', '_RAW')
            )

            # Atualizar gols apenas para jogos finalizados
            games_today['Goals_H_Today'] = games_today['home_goal']
            games_today['Goals_A_Today'] = games_today['away_goal']
            games_today.loc[games_today['status'] != 'FT', ['Goals_H_Today', 'Goals_A_Today']] = np.nan

            # Atualizar cart√µes vermelhos
            games_today['Home_Red'] = games_today['home_red']
            games_today['Away_Red'] = games_today['away_red']

            st.success(f"‚úÖ LiveScore merged: {len(results_df)} games loaded")
            return games_today
    else:
        st.warning(f"‚ö†Ô∏è No LiveScore file found for: {selected_date_str}")
        return games_today



############ Bloco H - C√°lculo de Dist√¢ncias 3D ################
# ---------------- C√ÅLCULO DE DIST√ÇNCIAS 3D ----------------
def calcular_distancias_3d(df):
    """
    Calcula dist√¢ncia 3D e √¢ngulos usando Aggression, Momentum (liga) e Momentum (time)
    """
    df = df.copy()

    required_cols = ['Aggression_Home', 'Aggression_Away', 'M_H', 'M_A', 'MT_H', 'MT_A']
    missing_cols = [col for col in required_cols if col not in df.columns]

    if missing_cols:
        st.warning(f"‚ö†Ô∏è Colunas faltando para c√°lculo 3D: {missing_cols}")
        for col in [
            'Quadrant_Dist_3D', 'Quadrant_Separation_3D',
            'Quadrant_Angle_XY', 'Quadrant_Angle_XZ', 'Quadrant_Angle_YZ',
            'Quadrant_Sin_XY', 'Quadrant_Cos_XY',
            'Quadrant_Sin_XZ', 'Quadrant_Cos_XZ', 
            'Quadrant_Sin_YZ', 'Quadrant_Cos_YZ',
            'Quadrant_Sin_Combo', 'Quadrant_Cos_Combo', 'Vector_Sign',
            'Momentum_Diff', 'Momentum_Diff_MT', 'Magnitude_3D'
        ]:
            df[col] = np.nan
        return df

    # --- Diferen√ßas puras ---
    dx = df['Aggression_Home'] - df['Aggression_Away']
    dy = df['M_H'] - df['M_A']
    dz = df['MT_H'] - df['MT_A']

    # --- Dist√¢ncia Euclidiana pura ---
    df['Quadrant_Dist_3D'] = np.sqrt(dx**2 + dy**2 + dz**2)

    # --- √Çngulos entre planos ---
    angle_xy = np.arctan2(dy, dx)
    angle_xz = np.arctan2(dz, dx)
    angle_yz = np.arctan2(dz, dy)

    df['Quadrant_Angle_XY'] = np.degrees(angle_xy)
    df['Quadrant_Angle_XZ'] = np.degrees(angle_xz)
    df['Quadrant_Angle_YZ'] = np.degrees(angle_yz)

    # --- Proje√ß√µes trigonom√©tricas b√°sicas ---
    df['Quadrant_Sin_XY'] = np.sin(angle_xy)
    df['Quadrant_Cos_XY'] = np.cos(angle_xy)
    df['Quadrant_Sin_XZ'] = np.sin(angle_xz)
    df['Quadrant_Cos_XZ'] = np.cos(angle_xz)
    df['Quadrant_Sin_YZ'] = np.sin(angle_yz)
    df['Quadrant_Cos_YZ'] = np.cos(angle_yz)

    # --- Combina√ß√µes trigonom√©tricas compostas ---
    df['Quadrant_Sin_Combo'] = np.sin(angle_xy + angle_xz + angle_yz)
    df['Quadrant_Cos_Combo'] = np.cos(angle_xy + angle_xz + angle_yz)

    # --- Sinal vetorial (dire√ß√£o espacial total) ---
    df['Vector_Sign'] = np.sign(dx * dy * dz)

    # --- Separa√ß√£o neutra 3D ---
    df['Quadrant_Separation_3D'] = (dx + dy + dz) / 3

    # --- Diferen√ßas individuais ---
    df['Momentum_Diff'] = dy
    df['Momentum_Diff_MT'] = dz

    # --- Magnitude total ---
    df['Magnitude_3D'] = np.sqrt(dx**2 + dy**2 + dz**2)

    return df



############ Bloco H2 - Valor Angular de Mercado ################
def calcular_valor_angular_mercado(df):
    """
    Calcula o valor esperado baseado no √¢ngulo 3D e odds de abertura (market inefficiency).
    """
    df = df.copy()

    required_cols = [
        'Quadrant_Dist_3D', 'Quadrant_Angle_XY',
        'Prob_Home', 'Prob_Away',
        'Odd_H_OP', 'Odd_D_OP', 'Odd_A_OP'
    ]
    missing = [c for c in required_cols if c not in df.columns]
    if missing:
        st.warning(f"‚ö†Ô∏è Colunas ausentes para c√°lculo de valor angular: {missing}")
        for col in ['Market_Error_Home', 'Market_Error_Away',
                    'Value_Score_Home', 'Value_Score_Away', 'Market_Classification']:
            df[col] = np.nan
        return df

    # Probabilidade impl√≠cita do mercado (normalizada)
    inv_sum = 1 / (1/df['Odd_H_OP'] + 1/df['Odd_D_OP'] + 1/df['Odd_A_OP'])
    df['p_market_home'] = inv_sum / df['Odd_H_OP']
    df['p_market_away'] = inv_sum / df['Odd_A_OP']

    # Erro de mercado (modelo - mercado)
    df['Market_Error_Home'] = df['Prob_Home'] - df['p_market_home']
    df['Market_Error_Away'] = df['Prob_Away'] - df['p_market_away']

    # Intensidade angular (baseada na dist√¢ncia e √¢ngulo XY)
    df['Angular_Intensity'] = np.abs(np.sin(np.radians(df['Quadrant_Angle_XY']))) * df['Quadrant_Dist_3D']

    # Value Score ajustado pelo √¢ngulo e intensidade
    df['Value_Score_Home'] = df['Market_Error_Home'] * df['Angular_Intensity']
    df['Value_Score_Away'] = df['Market_Error_Away'] * df['Angular_Intensity']

    # Classifica√ß√£o de valor
    def classify_value(v):
        if pd.isna(v):
            return '‚öñÔ∏è Neutro'
        if v > 0.05:
            return 'üéØ VALUE BET'
        elif v < -0.05:
            return 'üî¥ Overpriced'
        else:
            return '‚öñÔ∏è Neutro'

    df['Market_Classification'] = df['Value_Score_Home'].apply(classify_value)

    return df





############ Bloco I - Sistema ML com Clusters ################
# ---------------- MODELO ML COM CLUSTERS ----------------
def treinar_modelo_com_clusters(history, games_today):
    """
    Treina modelo ML 3D usando clusters (SEM QUADRANTES)
    """
    # Garantir features 3D e clusters
    history = calcular_distancias_3d(history)
    games_today = calcular_distancias_3d(games_today)
    history = aplicar_clusterizacao_3d(history)
    games_today = aplicar_clusterizacao_3d(games_today)

    # ‚úÖ Targets AH hist√≥ricos COM HANDICAP CORRETO
    history["Margin"] = history["Goals_H_FT"] - history["Goals_A_FT"]
    history["Target_AH_Home"] = history.apply(
        lambda r: 1 if calc_handicap_result(r["Margin"], r["Asian_Line_Decimal"], invert=False) > 0.5 else 0, axis=1
    )

    # Features categ√≥ricas (liga + cluster)
    ligas_dummies = pd.get_dummies(history['League'], prefix='League')
    clusters_dummies = pd.get_dummies(history['Cluster3D_Label'], prefix='C3D')

    # Features cont√≠nuas vetoriais + REGRESS√ÉO
    features_3d = [
        'Quadrant_Dist_3D', 'Quadrant_Separation_3D',
        'Quadrant_Sin_XY', 'Quadrant_Cos_XY',
        'Quadrant_Sin_XZ', 'Quadrant_Cos_XZ',
        'Quadrant_Sin_YZ', 'Quadrant_Cos_YZ',
        'Quadrant_Sin_Combo', 'Quadrant_Cos_Combo',
        'Vector_Sign', 'Magnitude_3D'
    ]
    
    # Features de REGRESS√ÉO
    features_regressao = [
        'Media_Score_Home', 'Media_Score_Away',
        'Regressao_Force_Home', 'Regressao_Force_Away',
        'Extremidade_Home', 'Extremidade_Away'
    ]

    extras_3d = history[features_3d].fillna(0)
    extras_regressao = history[features_regressao].fillna(0)

    # Combinar todas as features
    X = pd.concat([ligas_dummies, clusters_dummies, extras_3d, extras_regressao], axis=1)

    # Target
    y_home = history['Target_AH_Home'].astype(int)

    model_home = RandomForestClassifier(
        n_estimators=500,
        max_depth=12,
        random_state=42,
        class_weight='balanced_subsample',
        n_jobs=-1
    )

    model_home.fit(X, y_home)

    # Preparar dados de hoje
    ligas_today = pd.get_dummies(games_today['League'], prefix='League').reindex(columns=ligas_dummies.columns, fill_value=0)
    clusters_today = pd.get_dummies(games_today['Cluster3D_Label'], prefix='C3D').reindex(columns=clusters_dummies.columns, fill_value=0)
    extras_today = games_today[features_3d].fillna(0)
    extras_regressao_today = games_today[features_regressao].fillna(0)

    X_today = pd.concat([ligas_today, clusters_today, extras_today, extras_regressao_today], axis=1)

    # Previs√µes
    proba_home = model_home.predict_proba(X_today)[:, 1]
    proba_away = 1 - proba_home

    games_today['Prob_Home'] = proba_home
    games_today['Prob_Away'] = proba_away
    games_today['ML_Side'] = np.where(proba_home > proba_away, 'HOME', 'AWAY')
    games_today['ML_Confidence'] = np.maximum(proba_home, proba_away)
    games_today['Cluster_ML_Score_Home'] = games_today['Prob_Home']
    games_today['Cluster_ML_Score_Away'] = games_today['Prob_Away']
    games_today['Cluster_ML_Score_Main'] = games_today['ML_Confidence']

    # Import√¢ncia das features
    importances = pd.Series(model_home.feature_importances_, index=X.columns).sort_values(ascending=False)

    st.markdown("### üîç Top Features (Com Clusters 3D)")
    st.dataframe(importances.head(20).to_frame("Import√¢ncia"), use_container_width=True)

    # Verificar se features de cluster est√£o no topo
    cluster_no_top = len([f for f in importances.head(15).index if 'C3D' in f])
    st.info(f"üìä Features de Cluster no Top 15: {cluster_no_top}")

    st.success("‚úÖ Modelo 3D com Clusters treinado com sucesso!")
    return model_home, games_today


############ Bloco J - Sistema de Recomenda√ß√µes com Clusters ################
# ---------------- SISTEMA DE INDICA√á√ïES COM CLUSTERS ----------------
def adicionar_indicadores_explicativos_clusters(df):
    """Adiciona classifica√ß√µes e recomenda√ß√µes baseadas nos clusters 3D"""
    df = df.copy()

    # 1. CLASSIFICA√á√ÉO DE VALOR PARA HOME (CLUSTERS)
    conditions_home = [
        df['Cluster_ML_Score_Home'] >= 0.65,
        df['Cluster_ML_Score_Home'] >= 0.58,
        df['Cluster_ML_Score_Home'] >= 0.52,
        df['Cluster_ML_Score_Home'] >= 0.48,
        df['Cluster_ML_Score_Home'] < 0.48
    ]
    choices_home = ['üèÜ ALTO VALOR', '‚úÖ BOM VALOR', '‚öñÔ∏è NEUTRO', '‚ö†Ô∏è CAUTELA', 'üî¥ ALTO RISCO']
    df['Classificacao_Valor_Home'] = np.select(conditions_home, choices_home, default='‚öñÔ∏è NEUTRO')

    # 2. CLASSIFICA√á√ÉO DE VALOR PARA AWAY (CLUSTERS)
    conditions_away = [
        df['Cluster_ML_Score_Away'] >= 0.65,
        df['Cluster_ML_Score_Away'] >= 0.58,
        df['Cluster_ML_Score_Away'] >= 0.52,
        df['Cluster_ML_Score_Away'] >= 0.48,
        df['Cluster_ML_Score_Away'] < 0.48
    ]
    choices_away = ['üèÜ ALTO VALOR', '‚úÖ BOM VALOR', '‚öñÔ∏è NEUTRO', '‚ö†Ô∏è CAUTELA', 'üî¥ ALTO RISCO']
    df['Classificacao_Valor_Away'] = np.select(conditions_away, choices_away, default='‚öñÔ∏è NEUTRO')

    # 3. RECOMENDA√á√ÉO BASEADA EM CLUSTERS + REGRESS√ÉO (CORRIGIDA)
    def gerar_recomendacao_clusters(row):
        try:
            cluster = row.get('Cluster3D_Desc', 'üåÄ Caso At√≠pico')
            score_home = row.get('Cluster_ML_Score_Home', 0.5)
            score_away = row.get('Cluster_ML_Score_Away', 0.5)
            ml_side = row.get('ML_Side', 'HOME')
            tendencia_h = row.get('Tendencia_Home', '‚öñÔ∏è EST√ÅVEL')
            tendencia_a = row.get('Tendencia_Away', '‚öñÔ∏è EST√ÅVEL')
            
            # üéØ DEBUG: Ver o que est√° chegando
            debug_info = f"[CLUSTER: {cluster} | SCORE_H: {score_home:.1%} | SCORE_A: {score_away:.1%}]"
            
            # Estrat√©gias por tipo de cluster - COM NOMES FLEX√çVEIS
            if any(term in cluster for term in ['Home Domina', 'Home Agressivo', 'Home Vantagem']):
                if score_home >= 0.65 and any(term in tendencia_h for term in ['MELHORA', 'FORTE']):
                    return f'üí™ HOME DOMINANTE + Melhora ({score_home:.1%}) {debug_info}'
                elif score_home >= 0.58:
                    return f'üéØ HOME DOMINANTE ({score_home:.1%}) {debug_info}'
                elif score_home >= 0.52:
                    return f'üìà HOME com Vantagem ({score_home:.1%}) {debug_info}'
                else:
                    return f'‚öñÔ∏è HOME favorecido mas cuidado ({score_home:.1%}) {debug_info}'

            elif any(term in cluster for term in ['Away Domina', 'Away Agressivo', 'Away Vantagem']):
                if score_away >= 0.65 and any(term in tendencia_a for term in ['MELHORA', 'FORTE']):
                    return f'üí™ AWAY DOMINANTE + Melhora ({score_away:.1%}) {debug_info}'
                elif score_away >= 0.58:
                    return f'üéØ AWAY DOMINANTE ({score_away:.1%}) {debug_info}'
                elif score_away >= 0.52:
                    return f'üìà AWAY com Vantagem ({score_away:.1%}) {debug_info}'
                else:
                    return f'‚öñÔ∏è AWAY favorecido mas cuidado ({score_away:.1%}) {debug_info}'

            elif any(term in cluster for term in ['Equilibrado', 'Equil√≠brio', 'Neutro']):
                if ml_side == 'HOME' and score_home >= 0.55:
                    return f'üìà VALUE NO HOME (Equilibrado) ({score_home:.1%}) {debug_info}'
                elif ml_side == 'AWAY' and score_away >= 0.55:
                    return f'üìà VALUE NO AWAY (Equilibrado) ({score_away:.1%}) {debug_info}'
                else:
                    return f'‚öñÔ∏è CONFRONTO EQUILIBRADO (H:{score_home:.1%} A:{score_away:.1%}) {debug_info}'

            elif any(term in cluster for term in ['Imprevis√≠vel', 'Inst√°vel', 'Contradit√≥rio']):
                if 'MELHORA' in tendencia_h and score_home >= 0.55:
                    return f'üé≤ IMPREVIS√çVEL mas Home Melhorando ({score_home:.1%}) {debug_info}'
                elif 'MELHORA' in tendencia_a and score_away >= 0.55:
                    return f'üé≤ IMPREVIS√çVEL mas Away Melhorando ({score_away:.1%}) {debug_info}'
                else:
                    return f'üé≤ JOGO IMPREVIS√çVEL - Cautela (H:{score_home:.1%} A:{score_away:.1%}) {debug_info}'

            else:
                # üéØ RECOMENDA√á√ÉO BASEADA APENAS NOS SCORES (fallback)
                if score_home >= 0.70:
                    return f'üèÜ HOME FORTE ({score_home:.1%}) {debug_info}'
                elif score_away >= 0.70:
                    return f'üèÜ AWAY FORTE ({score_away:.1%}) {debug_info}'
                elif score_home >= 0.60:
                    return f'‚úÖ HOME com Valor ({score_home:.1%}) {debug_info}'
                elif score_away >= 0.60:
                    return f'‚úÖ AWAY com Valor ({score_away:.1%}) {debug_info}'
                elif abs(score_home - score_away) < 0.1:
                    return f'‚öñÔ∏è CONFRONTO EQUILIBRADO (H:{score_home:.1%} A:{score_away:.1%}) {debug_info}'
                else:
                    return f'üîç ANALISAR (H:{score_home:.1%} A:{score_away:.1%}) {debug_info}'
                    
        except Exception as e:
            return f'‚ùå ERRO: {str(e)}'

    df['Recomendacao'] = df.apply(gerar_recomendacao_clusters, axis=1)

    # 4. SCORE FINAL COMBINADO (Clusters + ML + Regress√£o)
    df['Score_Final_Clusters'] = (
        df['Cluster_ML_Score_Main'] * 0.6 + 
        df.get('Media_Score_Home', 0.5) * 0.2 + 
        df.get('Media_Score_Away', 0.5) * 0.2
    ) * 100

    # 5. CLASSIFICA√á√ÉO DE POTENCIAL
    conditions_potencial = [
        df['Score_Final_Clusters'] >= 70,
        df['Score_Final_Clusters'] >= 60,
        df['Score_Final_Clusters'] >= 50,
        df['Score_Final_Clusters'] >= 40,
        df['Score_Final_Clusters'] < 40
    ]
    choices_potencial = ['üåüüåüüåü POTENCIAL M√ÅXIMO', 'üåüüåü ALTO POTENCIAL', 'üåü POTENCIAL MODERADO', '‚öñÔ∏è POTENCIAL BAIXO', 'üî¥ RISCO ALTO']
    df['Classificacao_Potencial'] = np.select(conditions_potencial, choices_potencial, default='üåü POTENCIAL MODERADO')

    # 6. RANKING
    df['Ranking'] = df['Score_Final_Clusters'].rank(ascending=False, method='dense').astype(int)

    return df

# ---------------- FUN√á√ÉO DE DIAGN√ìSTICO DAS RECOMENDA√á√ïES ----------------
def diagnosticar_recomendacoes(df):
    """Diagn√≥stico detalhado do sistema de recomenda√ß√µes"""
    st.markdown("### üîç Diagn√≥stico do Sistema de Recomenda√ß√µes")
    
    if df.empty:
        st.warning("Nenhum dado para diagn√≥stico")
        return
    
    # 1. Verificar clusters dispon√≠veis
    st.write("**üéØ Clusters dispon√≠veis no dataset:**")
    if 'Cluster3D_Desc' in df.columns:
        cluster_counts = df['Cluster3D_Desc'].value_counts()
        for cluster, count in cluster_counts.items():
            st.write(f"  - `{cluster}`: {count} jogos")
    else:
        st.error("‚ùå Coluna 'Cluster3D_Desc' n√£o encontrada!")
    
    # 2. Verificar scores
    st.write("**üìä Distribui√ß√£o dos scores:**")
    if 'Cluster_ML_Score_Home' in df.columns:
        st.write(f"  - Score Home: {df['Cluster_ML_Score_Home'].min():.1%} a {df['Cluster_ML_Score_Home'].max():.1%}")
        st.write(f"  - Score Away: {df['Cluster_ML_Score_Away'].min():.1%} a {df['Cluster_ML_Score_Away'].max():.1%}")
    
    # 3. Amostra de recomenda√ß√µes
    st.write("**üëÄ Amostra de recomenda√ß√µes geradas:**")
    cols_amostra = ['Home', 'Away', 'Cluster3D_Desc', 'Cluster_ML_Score_Home', 'Cluster_ML_Score_Away', 'Recomendacao']
    cols_amostra = [c for c in cols_amostra if c in df.columns]
    st.dataframe(df[cols_amostra].head(10), use_container_width=True)



############ Bloco K - Estrat√©gias Baseadas em Clusters ################
# ---------------- ESTRAT√âGIAS COM CLUSTERS ----------------
def gerar_estrategias_por_cluster(df):
    """Gera estrat√©gias espec√≠ficas baseadas nos clusters 3D"""
    st.markdown("### üéØ Estrat√©gias por Tipo de Cluster")

    estrategias_clusters = {
        'üè† Home Domina Confronto': {
            'descricao': '**Home claramente superior** - Aggression, Momentum Liga e Momentum Time favor√°veis',
            'estrategia': 'Apostar Home quando odds > 1.80, buscar value spots',
            'confianca': 'Alta',
            'alvo_minimo': 0.58,
            'filtro_regressao': 'üìà MELHORA ou üìà FORTE MELHORA'
        },
        'üöó Away Domina Confronto': {
            'descricao': '**Away claramente superior** - Visitante com vantagem nas 3 dimens√µes',
            'estrategia': 'Apostar Away quando odds > 2.00, √≥timo para handicaps',
            'confianca': 'Alta', 
            'alvo_minimo': 0.58,
            'filtro_regressao': 'üìà MELHORA ou üìà FORTE MELHORA'
        },
        '‚öñÔ∏è Confronto Equilibrado': {
            'descricao': '**Times muito parecidos** - Diferen√ßas pequenas nas 3 dimens√µes',
            'estrategia': 'Buscar underdogs com value, apostas menores',
            'confianca': 'M√©dia',
            'alvo_minimo': 0.55,
            'filtro_regressao': 'QUALQUER (focar no value)'
        },
        'üé≠ Home Imprevis√≠vel': {
            'descricao': '**Sinais mistos** - Aggression, Momentum e Regress√£o em conflito',
            'estrategia': 'Apostas pequenas ou evitar, monitorar live',
            'confianca': 'Baixa',
            'alvo_minimo': 0.60,
            'filtro_regressao': 'üìà FORTE MELHORA (apenas)'
        },
        'üå™Ô∏è Home Inst√°vel': {
            'descricao': '**Alta volatilidade** - Valores extremos ou inconsistentes',
            'estrategia': 'EVITAR apostas pr√©-live, considerar live betting',
            'confianca': 'Muito Baixa',
            'alvo_minimo': 0.65,
            'filtro_regressao': 'EVITAR'
        }
    }

    for cluster, info in estrategias_clusters.items():
        jogos_cluster = df[df['Cluster3D_Desc'] == cluster]
        
        if not jogos_cluster.empty:
            st.write(f"**{cluster}**")
            st.write(f"üìã {info['descricao']}")
            st.write(f"üéØ Estrat√©gia: {info['estrategia']}")
            st.write(f"üìä Confian√ßa: {info['confianca']}")
            
            # M√©tricas do cluster
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Jogos", len(jogos_cluster))
            with col2:
                avg_score = jogos_cluster['Cluster_ML_Score_Main'].mean()
                st.metric("Score M√©dio", f"{avg_score:.1%}")
            with col3:
                high_value = len(jogos_cluster[jogos_cluster['Cluster_ML_Score_Main'] >= info['alvo_minimo']])
                st.metric("Oportunidades", high_value)
            
            # Top 3 oportunidades do cluster
            oportunidades = jogos_cluster[
                jogos_cluster['Cluster_ML_Score_Main'] >= info['alvo_minimo']
            ].head(3)
            
            if not oportunidades.empty:
                st.write("**Top Oportunidades:**")
                cols = ['Home', 'Away', 'League', 'Cluster_ML_Score_Home', 'Cluster_ML_Score_Away', 'Recomendacao']
                st.dataframe(oportunidades[cols].style.format({
                    'Cluster_ML_Score_Home': '{:.1%}',
                    'Cluster_ML_Score_Away': '{:.1%}'
                }), use_container_width=True)
            
            st.write("---")

def analisar_padroes_clusters(df):
    """Analisa padr√µes de sucesso por cluster"""
    st.markdown("### üìä An√°lise de Performance por Cluster")
    
    # Apenas jogos finalizados
    finished = df.dropna(subset=['Goals_H_Today', 'Goals_A_Today'])
    
    if finished.empty:
        st.info("‚è≥ Aguardando jogos finalizados para an√°lise...")
        return
    
    # Calcular acertos por cluster
    resultados = []
    for cluster in finished['Cluster3D_Desc'].unique():
        cluster_data = finished[finished['Cluster3D_Desc'] == cluster]
        total_jogos = len(cluster_data)
        
        if total_jogos > 0:
            # Jogos com recomenda√ß√µes claras
            recomendados = cluster_data[cluster_data['Recomendacao'].str.contains('üéØ|üí™|üìà')]
            acertos = 0
            total_recomendados = len(recomendados)
            
            if total_recomendados > 0:
                # L√≥gica simplificada de acerto (pode ser refinada)
                for _, jogo in recomendados.iterrows():
                    if ('HOME' in jogo['Recomendacao'] and jogo['Goals_H_Today'] > jogo['Goals_A_Today']) or \
                       ('AWAY' in jogo['Recomendacao'] and jogo['Goals_A_Today'] > jogo['Goals_H_Today']):
                        acertos += 1
                
                winrate = (acertos / total_recomendados) * 100
            else:
                winrate = 0
            
            resultados.append({
                'Cluster': cluster,
                'Total Jogos': total_jogos,
                'Recomendados': total_recomendados,
                'Acertos': acertos,
                'Winrate': f"{winrate:.1f}%"
            })
    
    if resultados:
        df_resultados = pd.DataFrame(resultados)
        st.dataframe(df_resultados, use_container_width=True)


############ Bloco L - Sistema Live Score com Clusters ################
# ---------------- LIVE SCORE COM CLUSTERS ----------------
def determine_handicap_result(row):
    """Determina se o HOME cobriu o handicap"""
    try:
        gh = float(row['Goals_H_Today']) if pd.notna(row['Goals_H_Today']) else np.nan
        ga = float(row['Goals_A_Today']) if pd.notna(row['Goals_A_Today']) else np.nan
        asian_line_decimal = row.get('Asian_Line_Decimal')  # ‚úÖ AGORA USA A COLUNA CORRETA
    except (ValueError, TypeError):
        return None

    if pd.isna(gh) or pd.isna(ga) or pd.isna(asian_line_decimal):
        return None

    margin = gh - ga
    # ‚úÖ USA A LINJA J√Å CONVERTIDA PARA PERSPECTIVA HOME
    handicap_result = calc_handicap_result(margin, asian_line_decimal, invert=False)

    if handicap_result > 0.5:
        return "HOME_COVERED"
    elif handicap_result == 0.5:
        return "PUSH"
    else:
        return "HOME_NOT_COVERED"

def check_handicap_recommendation_correct(rec, handicap_result):
    """Verifica se a recomenda√ß√£o estava correta"""
    if pd.isna(rec) or handicap_result is None or 'EVITAR' in str(rec):
        return None

    rec = str(rec)

    if any(keyword in rec for keyword in ['HOME', 'Home', 'DOMINANTE']):
        return handicap_result == "HOME_COVERED"
    elif any(keyword in rec for keyword in ['AWAY', 'Away', 'DOMINANTE']):
        return handicap_result in ["HOME_NOT_COVERED", "PUSH"]

    return None

def update_real_time_data_clusters(df):
    """Atualiza todos os dados em tempo real para sistema com clusters"""
    df['Handicap_Result'] = df.apply(determine_handicap_result, axis=1)
    df['Cluster_Correct'] = df.apply(
        lambda r: check_handicap_recommendation_correct(r['Recomendacao'], r['Handicap_Result']), axis=1
    )
    return df

def generate_live_summary_clusters(df):
    """Gera resumo em tempo real para sistema com clusters"""
    finished_games = df.dropna(subset=['Handicap_Result'])

    if finished_games.empty:
        return {
            "Total Jogos": len(df),
            "Jogos Finalizados": 0,
            "Recomenda√ß√µes Cluster": 0,
            "Acertos Cluster": 0,
            "Winrate Cluster": "0%"
        }

    cluster_recomendados = finished_games[finished_games['Cluster_Correct'].notna()]
    total_recomendados = len(cluster_recomendados)
    correct_recomendados = cluster_recomendados['Cluster_Correct'].sum()
    winrate = (correct_recomendados / total_recomendados) * 100 if total_recomendados > 0 else 0

    return {
        "Total Jogos": len(df),
        "Jogos Finalizados": len(finished_games),
        "Recomenda√ß√µes Cluster": total_recomendados,
        "Acertos Cluster": int(correct_recomendados),
        "Winrate Cluster": f"{winrate:.1f}%"
    }


############ Bloco M - Estilo da Tabela ################
# ---------------- ESTILO DA TABELA COM CLUSTERS ----------------
def estilo_tabela_clusters(df):
    """Aplica estilo √† tabela principal com clusters"""
    def cor_classificacao(valor):
        if 'üåüüåüüåü' in str(valor): return 'font-weight: bold'
        elif 'üåüüåü' in str(valor): return 'font-weight: bold'
        elif 'üåü' in str(valor): return 'font-weight: bold'
        elif 'üî¥' in str(valor): return 'font-weight: bold'
        elif 'üèÜ' in str(valor): return 'font-weight: bold'
        else: return ''

    colunas_para_estilo = []
    for col in ['Classificacao_Potencial', 'Classificacao_Valor_Home', 'Classificacao_Valor_Away', 'Recomendacao']:
        if col in df.columns:
            colunas_para_estilo.append(col)

    styler = df.style
    if colunas_para_estilo:
        styler = styler.applymap(cor_classificacao, subset=colunas_para_estilo)

    # Gradientes para colunas num√©ricas
    if 'Cluster_ML_Score_Home' in df.columns:
        styler = styler.background_gradient(subset=['Cluster_ML_Score_Home'], cmap='RdYlGn')
    if 'Cluster_ML_Score_Away' in df.columns:
        styler = styler.background_gradient(subset=['Cluster_ML_Score_Away'], cmap='RdYlGn')
    if 'Score_Final_Clusters' in df.columns:
        styler = styler.background_gradient(subset=['Score_Final_Clusters'], cmap='RdYlGn')
    if 'M_H' in df.columns:
        styler = styler.background_gradient(subset=['M_H', 'M_A'], cmap='coolwarm')

    return styler



############ Bloco N - Execu√ß√£o Principal: Carregamento de Dados ################
# ---------------- EXECU√á√ÉO PRINCIPAL ----------------
st.info("üìÇ Carregando dados para an√°lise 3D com clusters...")

# Sele√ß√£o de arquivo do dia
files = sorted([f for f in os.listdir(GAMES_FOLDER) if f.endswith(".csv")])
if not files:
    st.warning("No CSV files found in GamesDay folder.")
    st.stop()

options = files[-7:] if len(files) >= 7 else files
selected_file = st.selectbox("Select Matchday File:", options, index=len(options)-1)

date_match = re.search(r"\d{4}-\d{2}-\d{2}", selected_file)
selected_date_str = date_match.group(0) if date_match else datetime.now().strftime("%Y-%m-%d")

# Carregar dados com cache
games_today, history = load_cached_data(selected_file)

# Aplicar Live Score
games_today = load_and_merge_livescore(games_today, selected_date_str)

# ‚úÖ Converter Asian Line COM A NOVA FUN√á√ÉO
# st.info("üîÑ Convertendo Asian Line para perspectiva Home...")
history['Asian_Line_Decimal'] = history['Asian_Line'].apply(convert_asian_line_to_decimal)
games_today['Asian_Line_Decimal'] = games_today['Asian_Line'].apply(convert_asian_line_to_decimal)

# # ‚úÖ VALIDA√á√ÉO DO SISTEMA DE HANDICAP
# validar_conversao_handicap()
# verificar_sistema_handicap(history, games_today)

# Filtrar hist√≥rico com linha v√°lida
history = history.dropna(subset=['Asian_Line_Decimal'])
st.info(f"üìä Hist√≥rico com Asian Line v√°lida: {len(history)} jogos")

# Filtro anti-leakage temporal
if "Date" in history.columns:
    try:
        selected_date = pd.to_datetime(selected_date_str)
        history["Date"] = pd.to_datetime(history["Date"], errors="coerce")
        history = history[history["Date"] < selected_date].copy()
        st.info(f"üìä Treinando com {len(history)} jogos anteriores a {selected_date_str}")
    except Exception as e:
        st.error(f"Erro ao aplicar filtro temporal: {e}")

# Aplicar momentum e regress√£o
history = calcular_momentum_time(history)
games_today = calcular_momentum_time(games_today)
history = calcular_regressao_media(history)
games_today = calcular_regressao_media(games_today)


############ Bloco O - Execu√ß√£o Principal: Treinamento e Visualiza√ß√£o ################
# ---------------- TREINAMENTO DO MODELO ----------------
# st.markdown("## üß† Sistema 3D com Clusters - ML")

if not history.empty:
    try:
        modelo_home, games_today = treinar_modelo_com_clusters(history, games_today)
        st.success("‚úÖ Modelo 3D com Clusters treinado com sucesso!")
    except Exception as e:
        st.error(f"‚ùå Erro no treinamento do modelo: {e}")
        st.info("‚ö†Ô∏è Continuando sem modelo treinado...")
else:
    st.warning("‚ö†Ô∏è Hist√≥rico vazio - n√£o foi poss√≠vel treinar o modelo")

# ---------------- C√ÅLCULO DE VALOR ANGULAR ----------------
if {'Odd_H_OP', 'Odd_A_OP', 'Quadrant_Dist_3D'}.issubset(games_today.columns):
    games_today = calcular_valor_angular_mercado(games_today)
    st.success("üí∞ Valor Angular de Mercado calculado com sucesso!")
else:
    st.warning("‚ö†Ô∏è Dados insuficientes para c√°lculo de Valor Angular (faltam odds de abertura ou colunas 3D)")

# ---------------- DIAGN√ìSTICO DO GR√ÅFICO 3D ----------------
def diagnosticar_grafico_3d(df_plot, selected_date_str):
    # """Diagn√≥stico detalhado dos dados para o gr√°fico 3D"""
    # st.markdown("### üîç Diagn√≥stico do Gr√°fico 3D")
    
    # st.write(f"**Data analisada:** {selected_date_str}")
    # st.write(f"**Total de jogos filtrados:** {len(df_plot)}")
    
    if df_plot.empty:
        st.error("‚ùå DataFrame vazio - nenhum dado para exibir")
        return False
    
    # Verificar colunas essenciais
    required_cols = ['Aggression_Home', 'Aggression_Away', 'M_H', 'M_A', 'MT_H', 'MT_A', 'Cluster3D_Desc']
    missing_cols = [col for col in required_cols if col not in df_plot.columns]
    
    if missing_cols:
        st.error(f"‚ùå Colunas faltantes: {missing_cols}")
        return False
    
    st.success("‚úÖ Todas as colunas necess√°rias est√£o presentes")
    
    # Verificar dados num√©ricos
    numeric_cols = ['Aggression_Home', 'Aggression_Away', 'M_H', 'M_A', 'MT_H', 'MT_A']
    
    # st.write("**üìä Estat√≠sticas dos dados num√©ricos:**")
    # for col in numeric_cols:
    #     if col in df_plot.columns:
    #         non_null = df_plot[col].notna().sum()
    #         zero_count = (df_plot[col].fillna(0) == 0).sum()
    #         st.write(f"- {col}: {non_null} n√£o-nulos, {zero_count} zeros")
            
    #         # Mostrar alguns valores
    #         if non_null > 0:
    #             st.write(f"  Valores: {df_plot[col].head(3).tolist()}")
    
    # # Verificar clusters
    # if 'Cluster3D_Desc' in df_plot.columns:
    #     cluster_info = df_plot['Cluster3D_Desc'].value_counts()
    #     st.write("**üéØ Distribui√ß√£o de clusters:**")
    #     st.write(cluster_info)
    
    # # Verificar se h√° dados v√°lidos para plotagem
    # has_valid_data = False
    # for col in numeric_cols:
    #     if col in df_plot.columns:
    #         # Verificar se h√° pelo menos alguns valores n√£o-zero e n√£o-NaN
    #         valid_data = df_plot[col].dropna()
    #         if len(valid_data) > 0 and (valid_data != 0).any():
    #             has_valid_data = True
    #             break
    
    # if not has_valid_data:
    #     st.error("‚ùå Nenhum dado num√©rico v√°lido para plotagem (todos zero ou NaN)")
    #     return False
    
    # st.success("‚úÖ Dados v√°lidos encontrados para plotagem")
    # return True

def garantir_clusterizacao(df):
    """Garante que a clusteriza√ß√£o foi aplicada corretamente"""
    if 'Cluster3D_Desc' not in df.columns or df['Cluster3D_Desc'].isna().all():
        st.warning("üîÑ Aplicando clusteriza√ß√£o...")
        try:
            df = aplicar_clusterizacao_3d(df)
            st.success("‚úÖ Clusteriza√ß√£o aplicada com sucesso")
        except Exception as e:
            st.error(f"‚ùå Erro na clusteriza√ß√£o: {e}")
    return df

# ---------------- VISUALIZA√á√ÉO 3D INTERATIVA ----------------
st.markdown("## üéØ Visualiza√ß√£o 3D com Clusters")

# Filtros interativos
col1, col2 = st.columns([2, 1])
with col1:
    if "League" in games_today.columns and not games_today["League"].isna().all():
        leagues = sorted(games_today["League"].dropna().unique())
        selected_league = st.selectbox(
            "Selecione a liga para an√°lise:",
            options=["‚öΩ Todas as ligas"] + leagues,
            index=0
        )
    else:
        selected_league = "‚öΩ Todas as ligas"
        st.warning("‚ö†Ô∏è Nenhuma coluna de 'League' encontrada")

with col2:
    max_n = len(games_today)
    n_to_show = st.slider("Jogos para exibir:", 10, min(max_n, 100), 30, step=5)

# Filtrar por liga
if selected_league != "‚öΩ Todas as ligas":
    df_filtered = games_today[games_today["League"] == selected_league].copy()
else:
    df_filtered = games_today.copy()

# Garantir clusteriza√ß√£o
df_filtered = garantir_clusterizacao(df_filtered)

# Filtro por cluster
st.markdown("### üîç Filtro por Cluster")
clusters_disponiveis = df_filtered['Cluster3D_Desc'].unique() if 'Cluster3D_Desc' in df_filtered.columns else []
if len(clusters_disponiveis) > 0:
    cluster_selecionado = st.selectbox(
        "Filtrar por tipo de confronto:",
        options=["üéØ Todos os clusters"] + list(clusters_disponiveis),
        index=0
    )

    if cluster_selecionado != "üéØ Todos os clusters":
        df_plot = df_filtered[df_filtered['Cluster3D_Desc'] == cluster_selecionado].copy()
    else:
        df_plot = df_filtered.copy()
else:
    st.warning("‚ö†Ô∏è Nenhum cluster dispon√≠vel - usando dados brutos")
    df_plot = df_filtered.copy()

# Aplicar limite de jogos
df_plot = df_plot.head(n_to_show)

# ‚úÖ EXECUTAR DIAGN√ìSTICO ANTES DO GR√ÅFICO
diagnostico_ok = diagnosticar_grafico_3d(df_plot, selected_date_str)

if not diagnostico_ok:
    st.warning("üö® Gr√°fico 3D n√£o ser√° exibido devido a problemas nos dados")
    
    # Mostrar dados brutos para debug
    st.markdown("### üìã Dados Brutos para An√°lise")
    debug_cols = ['Home', 'Away', 'League', 'Aggression_Home', 'Aggression_Away', 'M_H', 'M_A', 'MT_H', 'MT_A', 'Cluster3D_Desc']
    debug_cols = [col for col in debug_cols if col in df_plot.columns]
    
    if debug_cols:
        st.dataframe(df_plot[debug_cols], use_container_width=True)
    
else:
    # VERIFICAR SE H√Å DADOS V√ÅLIDOS PARA O GR√ÅFICO 3D
    required_cols_3d = ['Aggression_Home', 'Aggression_Away', 'M_H', 'M_A', 'MT_H', 'MT_A', 'Cluster3D_Desc']
    missing_3d_cols = [col for col in required_cols_3d if col not in df_plot.columns]

    if missing_3d_cols:
        st.warning(f"‚ö†Ô∏è Colunas necess√°rias para gr√°fico 3D n√£o encontradas: {missing_3d_cols}")
    else:
        # Verificar se temos dados num√©ricos v√°lidos
        numeric_cols = ['Aggression_Home', 'Aggression_Away', 'M_H', 'M_A', 'MT_H', 'MT_A']
        df_numeric_check = df_plot[numeric_cols].fillna(0)
        
        # Verificar se h√° valores n√£o-zero
        has_non_zero_data = False
        for col in numeric_cols:
            if col in df_plot.columns:
                non_zero_values = df_plot[col].fillna(0) != 0
                if non_zero_values.any():
                    has_non_zero_data = True
                    break
        
        if not has_non_zero_data:
            st.warning("‚ö†Ô∏è Todos os valores num√©ricos s√£o zero - gr√°fico 3D pode ficar vazio")
        
        try:
            # Criar e exibir gr√°fico 3D
            st.info("üé® Gerando gr√°fico 3D...")
            fig_3d_clusters = create_3d_plot_with_clusters(df_plot, n_to_show, selected_league)
            st.plotly_chart(fig_3d_clusters, use_container_width=True)
            
            # Legenda dos clusters
            st.markdown("""
            ### üé® Legenda dos Clusters 3D:
            - **üîµ Home Domina Confronto**: Home superior nas 3 dimens√µes
            - **üî¥ Away Domina Confronto**: Away superior nas 3 dimens√µes  
            - **üü¢ Confronto Equilibrado**: Times muito parecidos
            - **üü† Home Imprevis√≠vel**: Sinais mistos e conflitantes
            - **üü£ Home Inst√°vel**: Alta volatilidade e inconsist√™ncia
            """)
            
            # Estat√≠sticas dos clusters exibidos
            st.markdown("### üìä Estat√≠sticas dos Clusters no Gr√°fico")
            cluster_counts = df_plot['Cluster3D_Desc'].value_counts()
            st.dataframe(cluster_counts, use_container_width=True)
            
        except Exception as e:
            st.error(f"‚ùå Erro ao criar gr√°fico 3D: {e}")
            st.info("üìã Mostrando dados em formato de tabela...")
            
            # Mostrar dados em tabela como fallback
            display_cols = ['Home', 'Away', 'League', 'Cluster3D_Desc', 'Aggression_Home', 'Aggression_Away', 'M_H', 'M_A']
            display_cols = [col for col in display_cols if col in df_plot.columns]
            
            if display_cols:
                st.dataframe(
                    df_plot[display_cols].style.format({
                        'Aggression_Home': '{:.2f}',
                        'Aggression_Away': '{:.2f}',
                        'M_H': '{:.2f}',
                        'M_A': '{:.2f}'
                    }),
                    use_container_width=True
                )


############ Bloco P - Execu√ß√£o Principal: Tabela Principal ################

# No Bloco P - ANTES de exibir a tabela principal, adicione:
st.markdown("## üéØ Sistema de Recomenda√ß√µes - Diagn√≥stico")
diagnosticar_recomendacoes(games_today)

# ---------------- TABELA PRINCIPAL COM CLUSTERS ----------------
st.markdown("## üèÜ Melhores Oportunidades - Sistema Clusters 3D")

if not games_today.empty and 'Cluster_ML_Score_Home' in games_today.columns:
    # Preparar dados para exibi√ß√£o
    ranking_clusters = games_today.copy()
    
    # Aplicar indicadores e estrat√©gias
    ranking_clusters = adicionar_indicadores_explicativos_clusters(ranking_clusters)
    ranking_clusters = update_real_time_data_clusters(ranking_clusters)
    
    # Ordenar por score final
    ranking_clusters = ranking_clusters.sort_values('Score_Final_Clusters', ascending=False)
    
    # ---------------- COLUNAS PRINCIPAIS ----------------
    colunas_principais = [
        'Ranking', 'League', 'Time', 'Home', 'Away',
        'Goals_H_Today', 'Goals_A_Today', 'ML_Side',
        'Cluster3D_Desc',
        'Cluster_ML_Score_Home', 'Cluster_ML_Score_Away',
        'Score_Final_Clusters', 'Classificacao_Potencial',
        'Classificacao_Valor_Home', 'Classificacao_Valor_Away', 'Recomendacao',
        # Dados 3D
        'M_H', 'M_A', 'Quadrant_Dist_3D',
        # Regress√£o
        'Tendencia_Home', 'Tendencia_Away',
        'Media_Score_Home', 'Media_Score_Away',
        # Valor Angular de Mercado
        'Market_Error_Home', 'Market_Error_Away',
        'Value_Score_Home', 'Value_Score_Away',
        'Market_Classification',
        # Live Score
        'Asian_Line_Decimal', 'Handicap_Result', 'Cluster_Correct'
    ]
    
    # Filtrar colunas existentes
    cols_finais = [c for c in colunas_principais if c in ranking_clusters.columns]
    
    # Exibir resumo live
    st.markdown("### üì° Live Score Monitor")
    live_summary = generate_live_summary_clusters(ranking_clusters)
    st.json(live_summary)
    
    # Exibir tabela principal
    st.write(f"üéØ Exibindo {len(ranking_clusters)} jogos ordenados por Score Clusters")
    
    # ---------------- ESTILO E FORMATA√á√ÉO ----------------
    styler = estilo_tabela_clusters(ranking_clusters[cols_finais])
    
    # Gradientes adicionais para Valor Angular
    if 'Value_Score_Home' in ranking_clusters.columns:
        styler = styler.background_gradient(subset=['Value_Score_Home'], cmap='RdYlGn')
    if 'Value_Score_Away' in ranking_clusters.columns:
        styler = styler.background_gradient(subset=['Value_Score_Away'], cmap='RdYlGn')
    if 'Market_Error_Home' in ranking_clusters.columns:
        styler = styler.background_gradient(subset=['Market_Error_Home'], cmap='RdYlGn')
    if 'Market_Error_Away' in ranking_clusters.columns:
        styler = styler.background_gradient(subset=['Market_Error_Away'], cmap='RdYlGn')

    # Exibi√ß√£o final
    st.dataframe(
        styler.format({
            'Goals_H_Today': '{:.0f}',
            'Goals_A_Today': '{:.0f}',
            'Asian_Line_Decimal': '{:.2f}',
            'Cluster_ML_Score_Home': '{:.1%}',
            'Cluster_ML_Score_Away': '{:.1%}',
            'Score_Final_Clusters': '{:.1f}',
            'M_H': '{:.2f}',
            'M_A': '{:.2f}',
            'Quadrant_Dist_3D': '{:.2f}',
            'Media_Score_Home': '{:.2f}',
            'Media_Score_Away': '{:.2f}',
            'Market_Error_Home': '{:.2%}',
            'Market_Error_Away': '{:.2%}',
            'Value_Score_Home': '{:.3f}',
            'Value_Score_Away': '{:.3f}'
        }, na_rep="-"),
        use_container_width=True,
        height=600
    )
    
    # ---------------- AN√ÅLISES ESPEC√çFICAS ----------------
    gerar_estrategias_por_cluster(ranking_clusters)
    analisar_padroes_clusters(ranking_clusters)
    
else:
    st.error("""
    ‚ùå **N√£o foi poss√≠vel gerar a tabela de confrontos**
    
    **Poss√≠veis causas:**
    - Dados de hoje vazios
    - Modelo n√£o foi treinado corretamente
    - Colunas necess√°rias n√£o encontradas
    
    **Verifique:**
    1. Se o arquivo CSV tem dados v√°lidos
    2. Se o hist√≥rico tem dados suficientes
    3. Se todas as colunas necess√°rias existem
    """)


############ Bloco Q - Resumo Executivo e Filtros Avan√ßados ################
# ---------------- RESUMO EXECUTIVO ----------------
def resumo_executivo_clusters(df):
    """Resumo executivo do sistema com clusters"""
    st.markdown("## üìã Resumo Executivo - Sistema Clusters 3D")
    
    if df.empty:
        st.info("Nenhum dado dispon√≠vel para resumo")
        return

    # ‚úÖ Garante que existam colunas de classifica√ß√£o
    if 'Classificacao_Potencial' not in df.columns:
        df = adicionar_indicadores_explicativos_clusters(df)
    
    total_jogos = len(df)
    
    # Estat√≠sticas de clusters
    if 'Cluster3D_Desc' in df.columns:
        cluster_dist = df['Cluster3D_Desc'].value_counts()
        cluster_mais_comum = cluster_dist.index[0] if not cluster_dist.empty else "N/A"
    else:
        cluster_dist = pd.Series()
        cluster_mais_comum = "N/A"
    
    # Estat√≠sticas de valor
    alto_valor = len(df[df['Classificacao_Potencial'].str.contains('üåüüåü', na=False)])
    alto_risco = len(df[df['Classificacao_Potencial'].str.contains('üî¥', na=False)])
    
    # Estat√≠sticas de recomenda√ß√£o
    if 'Recomendacao' in df.columns:
        recomendacoes_positivas = len(df[df['Recomendacao'].str.contains('üéØ|üí™|üìà', na=False)])
        recomendacoes_cautela = len(df[df['Recomendacao'].str.contains('‚öñÔ∏è|üé≤|üå™Ô∏è', na=False)])
    else:
        recomendacoes_positivas = 0
        recomendacoes_cautela = 0
    
    # M√©tricas em colunas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Jogos", total_jogos)
        st.metric("Cluster Mais Comum", cluster_mais_comum)
    
    with col2:
        st.metric("üåüüåü Oportunidades", alto_valor)
        st.metric("üî¥ Alto Risco", alto_risco)
    
    with col3:
        st.metric("üéØ Recomenda√ß√µes Positivas", recomendacoes_positivas)
        st.metric("‚öñÔ∏è Recomenda√ß√µes Cautela", recomendacoes_cautela)
    
    with col4:
        avg_score = df['Score_Final_Clusters'].mean() if 'Score_Final_Clusters' in df.columns else 0
        st.metric("Score M√©dio", f"{avg_score:.1f}")
        st.metric("Clusters Diferentes", len(cluster_dist))
    
    # Distribui√ß√£o de clusters
    if not cluster_dist.empty:
        st.markdown("### üìä Distribui√ß√£o por Cluster")
        st.dataframe(cluster_dist, use_container_width=True)

    # ---------------- EXIBIR JOGOS DE ALTO VALOR ----------------
    if 'Market_Classification' in df.columns:
        top_value = df[df['Market_Classification'] == 'üéØ VALUE BET'].copy()
        if not top_value.empty:
            st.markdown("### üí∞ Top 10 Jogos com Valor Angular de Mercado")
            
            cols = [
                'League', 'Home', 'Away', 'Cluster3D_Desc',
                'Market_Error_Home', 'Market_Error_Away',
                'Value_Score_Home', 'Value_Score_Away',
                'Score_Final_Clusters', 'Recomendacao'
            ]
            cols = [c for c in cols if c in top_value.columns]
            
            top_value_sorted = top_value.sort_values('Value_Score_Home', ascending=False).head(10)
            
            st.dataframe(
                top_value_sorted[cols].style.format({
                    'Market_Error_Home': '{:.2%}',
                    'Market_Error_Away': '{:.2%}',
                    'Value_Score_Home': '{:.3f}',
                    'Value_Score_Away': '{:.3f}',
                    'Score_Final_Clusters': '{:.1f}'
                }).background_gradient(subset=['Value_Score_Home'], cmap='RdYlGn'),
                use_container_width=True
            )
        else:
            st.info("‚öñÔ∏è Nenhum jogo classificado como 'üéØ VALUE BET' no momento.")

# Aplicar resumo
if not games_today.empty and 'Cluster3D_Desc' in games_today.columns:
    resumo_executivo_clusters(games_today)

# ---------------- FILTROS AVAN√áADOS ----------------
st.sidebar.markdown("## üîß Filtros Avan√ßados")

# Filtro de regress√£o
st.sidebar.markdown("### üîÑ Filtro de Regress√£o")
filtro_regressao = st.sidebar.selectbox(
    "Tend√™ncia de regress√£o:",
    [
        "Todas as tend√™ncias",
        "üìà Times em Melhora", 
        "üìâ Times em Queda",
        "‚öñÔ∏è Times Est√°veis"
    ]
)

# Filtro de confidence
st.sidebar.markdown("### üéØ Filtro de Confian√ßa")
confianca_minima = st.sidebar.slider(
    "Confian√ßa m√≠nima do ML:",
    0.50, 0.95, 0.55, 0.01
)

# Aplicar filtros se necess√°rio
if st.sidebar.button("üîÑ Aplicar Filtros"):
    st.sidebar.success("Filtros aplicados!")
    # Os filtros seriam aplicados na pr√≥xima itera√ß√£o

st.markdown("---")
st.success("üéØ **Sistema 3D com Clusters ML** implementado com sucesso!")


st.info("""
**‚úÖ Sistema Simplificado:**
- üß† **Clusters 3D** em vez de quadrantes fixos
- üìà **Regress√£o √† M√©dia** integrada
- üéØ **Estrat√©gias por Cluster** espec√≠ficas
- üìä **Visualiza√ß√£o 3D** colorida por clusters
- üîÑ **Live Score** em tempo real
""")
